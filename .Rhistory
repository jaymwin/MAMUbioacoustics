swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(matches('site_name')),
mamu_station_id = coaslesce(matches('station_id'))
) |>
glimpse()
epi_df |>
select(5:23, 28) |>
rename(
deploy_or_retrieval = matches('Deployment_or'),
deployer_name = matches('Deployer_name'),
deployer_org = matches('Deployer_organizat'),
uw_site_name = matches('UW_site_name'),
cell_id = matches('UW_cell'),
uw_mamu_station_id = matches('UW_MAMU_station_ID'),
ncasi_site_name = matches('NCASI_site_name'),
ncasi_mamu_station_id = matches('NCASI_MAMU_station'),
cal_fire_site_name = matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = matches('CAL_FIRE_MAMU_sta'),
swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = coaslesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id)
) |>
glimpse()
epi_df |>
select(5:23, 28) |>
rename(
deploy_or_retrieval = matches('Deployment_or'),
deployer_name = matches('Deployer_name'),
deployer_org = matches('Deployer_organizat'),
uw_site_name = matches('UW_site_name'),
cell_id = matches('UW_cell'),
uw_mamu_station_id = matches('UW_MAMU_station_ID'),
ncasi_site_name = matches('NCASI_site_name'),
ncasi_mamu_station_id = matches('NCASI_MAMU_station'),
cal_fire_site_name = matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = matches('CAL_FIRE_MAMU_sta'),
swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id)
) |>
glimpse()
epi_df |>
select(5:23, 28) |>
rename(
deploy_or_retrieval = matches('Deployment_or'),
deployer_name = matches('Deployer_name'),
deployer_org = matches('Deployer_organizat'),
uw_site_name = matches('UW_site_name'),
cell_id = matches('UW_cell'),
uw_mamu_station_id = matches('UW_MAMU_station_ID'),
ncasi_site_name = matches('NCASI_site_name'),
ncasi_mamu_station_id = matches('NCASI_MAMU_station'),
cal_fire_site_name = matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = matches('CAL_FIRE_MAMU_sta'),
swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id)
) |>
select(deploy_or_retrieval:deployer_org, site_name, cell_id, mamu_station_id, swift_id:comments) |>
glimpse()
epi_df |>
select(5:23, 28) |>
rename(
deploy_or_retrieval = matches('Deployment_or'),
deployer_name = matches('Deployer_name'),
deployer_org = matches('Deployer_organizat'),
uw_site_name = matches('UW_site_name'),
cell_id = matches('UW_cell'),
uw_mamu_station_id = matches('UW_MAMU_station_ID'),
ncasi_site_name = matches('NCASI_site_name'),
ncasi_mamu_station_id = matches('NCASI_MAMU_station'),
cal_fire_site_name = matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = matches('CAL_FIRE_MAMU_sta'),
swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = dmy(date)
) |>
select(deploy_or_retrieval:deployer_org, site_name, cell_id, mamu_station_id, swift_id:comments)
epi_df |>
select(5:23, 28) |>
rename(
deploy_or_retrieval = matches('Deployment_or'),
deployer_name = matches('Deployer_name'),
deployer_org = matches('Deployer_organizat'),
uw_site_name = matches('UW_site_name'),
cell_id = matches('UW_cell'),
uw_mamu_station_id = matches('UW_MAMU_station_ID'),
ncasi_site_name = matches('NCASI_site_name'),
ncasi_mamu_station_id = matches('NCASI_MAMU_station'),
cal_fire_site_name = matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = matches('CAL_FIRE_MAMU_sta'),
swift_id = matches('Swift_ID'),
deployed_sd_card_id = matches('Deployed_SD_card'),
retrieved_sd_card_id = matches('Retrieved_SD_card'),
aru_status = matches('ARU_light'),
date = matches('Date'),
time = matches('Time'),
aru_photo_url = matches('Picture_of_deploy'),
lat = matches('lat_'),
long = matches('long_'),
comments = matches('Comments')
) |>
mutate(
site_name = coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = dmy(date)
) |>
select(deploy_or_retrieval:deployer_org, site_name, cell_id, mamu_station_id, swift_id:comments) |>
glimpse()
load_all()
library(tidyverse)
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
glimpse(epi_df)
use_r('utils.R')
use_r('copy_compress_flacs')
load_all()
library(MAMUbioacoustics)
library(tidyverse)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
# Define the paths for input and output
input_dir <- "D:"
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp"
output_dir <- "E:/2025/flacs"
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
library(furrr)
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
check(); document()
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
load_all()
library(devtools)
load_all()
check()
document()
library(devtools)
document()
check()
check(); document()
# temporary folders to hold wavs on desktop or other local folder
create_temp_folders <- function(wav_file, input_dir, temp_dir) {
stringr::str_replace(
stringr::str_remove(wav_file, basename(wav_file)),
input_dir,
stringr::str_c(temp_dir, '/')
) |>
fs::dir_create()
}
create_temp_folders
# Define the paths for input and output
# input_dir <- "D:"
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test"
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp"
output_dir <- "E:/2025/flacs"
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
wav_files
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
swift
library(tidyverse)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
site
cell
station
create_temp_folders
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
wav_files |>
purrr::walk(\(x) create_flac_folders(wav_file = x, output_dir = output_dir, site_name = site, cell_id = cell, station_id = station, swift_id = swift))
convert_to_flac
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, stringr::str_c(temp_dir, '/')), basename(wav_file))
temp_path
wav_file
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, stringr::str_c(temp_dir)), basename(wav_file))
temp_path
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir, basename(wav_file))
temp_path
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir, basename(wav_file))
temp_path
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
# Define the output flac file path
output_file <- file.path(stringr::str_glue('{output_dir}/{site_name}/{cell_id}/{station_id}/{swift_id}_{stringr::str_extract(wav_file, "[0-9]{8}")}/{stringr::str_replace(basename(wav_file), ".wav", ".flac")}'))
check()
check()
check()
load_all()
document()
library(MAMUbioacoustics)
library(tidyverse)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# view data
glimpse(epi_df)
library(devtools)
load_all()
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
# Define the paths for input and output
# input_dir <- "D:"
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test"
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp"
output_dir <- "E:/2025/flacs"
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
wav_files
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir, basename(wav_file))
stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file))
stringr::str_remove(wav_file, basename(wav_file)
stringr::str_remove(wav_file, basename(wav_file))
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir, basename(wav_file))
stringr::str_remove(wav_file, basename(wav_file))
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir), temp_dir, basename(wav_file))
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir), basename(wav_file))
temp_path
check()
# Define the paths for input and output
# input_dir <- "D:"
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test"
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp"
output_dir <- "E:/2025/flacs"
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
library(MAMUbioacoustics)
library(tidyverse)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# Define the paths for input and output
# input_dir <- "D:"
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test"
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp"
output_dir <- "E:/2025/flacs"
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
station
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
wav_files |>
purrr::walk(\(x) create_flac_folders(wav_file = x, output_dir = output_dir, site_name = site, cell_id = cell, station_id = station, swift_id = swift))
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir, basename(wav_file))
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir), basename(wav_file))
temp_path
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = TRUE
)
# Define the output flac file path
output_file <- file.path(stringr::str_glue('{output_dir}/{site}/{cell}/{station}/{swift_id}_{stringr::str_extract(wav_file, "[0-9]{8}")}/{stringr::str_replace(basename(wav_file), ".wav", ".flac")}'))
site_name = site
site_name
cell_id = cell
cell_id
station_id =  station
swift_id = swift
# Define the output flac file path
output_file <- file.path(stringr::str_glue('{output_dir}/{site}/{cell}/{station}/{swift_id}_{stringr::str_extract(wav_file, "[0-9]{8}")}/{stringr::str_replace(basename(wav_file), ".wav", ".flac")}'))
output_file
janitor::clean_names(station)
janitor::make_clean_names(station)
check()
document()
epi_df
deployments_sf <-
epi_df |>
sf::st_as_sf(coords = c('long', 'lat'), crs = 4326)
mapview::mapview(deployments_sf, zcol = 'swift_id')
mapview::mapview(deployments_sf, zcol = 'swift_id', layer.name = 'ARU deployments')
use_r('map_deployments')
check(); document()
beepr::beep()
library(devtools)
check()
convert_to_flac
