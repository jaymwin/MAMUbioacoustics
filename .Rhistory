cal_fire_site_name = dplyr::matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = dplyr::matches('CAL_FIRE_MAMU_sta'),
swift_id = dplyr::matches('Swift_ID'),
deployed_sd_card_id = dplyr::matches('Deployed_SD_card'),
retrieved_sd_card_id = dplyr::matches('Retrieved_SD_card'),
aru_status = dplyr::matches('ARU_light'),
date = dplyr::matches('Date'),
time = dplyr::matches('Time'),
aru_photo_url = dplyr::matches('Picture_of_deploy'),
lat = dplyr::matches('lat_'),
long = dplyr::matches('long_'),
comments = dplyr::matches('Comments')
) |>
dplyr::mutate(
site_name = dplyr::coalesce(uw_site_name, ncasi_site_name, cal_fire_site_name),
mamu_station_id = dplyr::coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = lubridate::dmy(date),
mamu_station_id = janitor::make_clean_names(mamu_station_id)
)
readr::read_csv(
res1$url
) |>
dplyr::select(5:24, 29) |>
dplyr::rename(
deploy_or_retrieval = dplyr::matches('Deployment_or'),
deployer_name = dplyr::matches('Your_name'),
deployer_org = dplyr::matches('Your_organization'),
uw_site_name = dplyr::matches('UW_site_name'),
cell_id = dplyr::matches('UW_cell'),
uw_mamu_station_id = dplyr::matches('UW_MAMU_station_ID'),
ncasi_site_name = dplyr::matches('NCASI_site_name'),
ncasi_mamu_station_id = dplyr::matches('NCASI_MAMU_station'),
cal_fire_site_name = dplyr::matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = dplyr::matches('CAL_FIRE_MAMU_sta'),
swift_id = dplyr::matches('Swift_ID'),
deployed_sd_card_id = dplyr::matches('Deployed_SD_card'),
retrieved_sd_card_id = dplyr::matches('Retrieved_SD_card'),
aru_status = dplyr::matches('ARU_light'),
date = dplyr::matches('Date'),
time = dplyr::matches('Time'),
aru_photo_url = dplyr::matches('Picture_of_deploy'),
lat = dplyr::matches('lat_'),
long = dplyr::matches('long_'),
comments = dplyr::matches('Comments')
) |>
dplyr::mutate(
mamu_station_id = dplyr::coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id) # ,
# date = lubridate::dmy(date),
# mamu_station_id = janitor::make_clean_names(mamu_station_id)
) |>
glimpse()
readr::read_csv(
res1$url
) |>
dplyr::select(5:24, 29) |>
dplyr::rename(
deploy_or_retrieval = dplyr::matches('Deployment_or'),
deployer_name = dplyr::matches('Your_name'),
deployer_org = dplyr::matches('Your_organization'),
uw_site_name = dplyr::matches('UW_site_name'),
cell_id = dplyr::matches('UW_cell'),
uw_mamu_station_id = dplyr::matches('UW_MAMU_station_ID'),
ncasi_site_name = dplyr::matches('NCASI_site_name'),
ncasi_mamu_station_id = dplyr::matches('NCASI_MAMU_station'),
cal_fire_site_name = dplyr::matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = dplyr::matches('CAL_FIRE_MAMU_sta'),
swift_id = dplyr::matches('Swift_ID'),
deployed_sd_card_id = dplyr::matches('Deployed_SD_card'),
retrieved_sd_card_id = dplyr::matches('Retrieved_SD_card'),
aru_status = dplyr::matches('ARU_light'),
date = dplyr::matches('Date'),
time = dplyr::matches('Time'),
aru_photo_url = dplyr::matches('Picture_of_deploy'),
lat = dplyr::matches('lat_'),
long = dplyr::matches('long_'),
comments = dplyr::matches('Comments')
) |>
dplyr::mutate(
mamu_station_id = dplyr::coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = lubridate::dmy(date),
# mamu_station_id = janitor::make_clean_names(mamu_station_id)
) |>
glimpse()
readr::read_csv(
res1$url
) |>
dplyr::select(5:24, 29) |>
dplyr::rename(
deploy_or_retrieval = dplyr::matches('Deployment_or'),
deployer_name = dplyr::matches('Your_name'),
deployer_org = dplyr::matches('Your_organization'),
uw_site_name = dplyr::matches('UW_site_name'),
cell_id = dplyr::matches('UW_cell'),
uw_mamu_station_id = dplyr::matches('UW_MAMU_station_ID'),
ncasi_site_name = dplyr::matches('NCASI_site_name'),
ncasi_mamu_station_id = dplyr::matches('NCASI_MAMU_station'),
cal_fire_site_name = dplyr::matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = dplyr::matches('CAL_FIRE_MAMU_sta'),
swift_id = dplyr::matches('Swift_ID'),
deployed_sd_card_id = dplyr::matches('Deployed_SD_card'),
retrieved_sd_card_id = dplyr::matches('Retrieved_SD_card'),
aru_status = dplyr::matches('ARU_light'),
date = dplyr::matches('Date'),
time = dplyr::matches('Time'),
aru_photo_url = dplyr::matches('Picture_of_deploy'),
lat = dplyr::matches('lat_'),
long = dplyr::matches('long_'),
comments = dplyr::matches('Comments')
) |>
dplyr::mutate(
mamu_station_id = dplyr::coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = lubridate::dmy(date),
mamu_station_id = janitor::make_clean_names(mamu_station_id)
) |>
glimpse()
readr::read_csv(
res1$url
) |>
dplyr::select(5:24, 29) |>
dplyr::rename(
deploy_or_retrieval = dplyr::matches('Deployment_or'),
deployer_name = dplyr::matches('Your_name'),
deployer_org = dplyr::matches('Your_organization'),
uw_site_name = dplyr::matches('UW_site_name'),
cell_id = dplyr::matches('UW_cell'),
uw_mamu_station_id = dplyr::matches('UW_MAMU_station_ID'),
ncasi_site_name = dplyr::matches('NCASI_site_name'),
ncasi_mamu_station_id = dplyr::matches('NCASI_MAMU_station'),
cal_fire_site_name = dplyr::matches('CAL_FIRE_site_name'),
cal_fire_mamu_station_id = dplyr::matches('CAL_FIRE_MAMU_sta'),
swift_id = dplyr::matches('Swift_ID'),
deployed_sd_card_id = dplyr::matches('Deployed_SD_card'),
retrieved_sd_card_id = dplyr::matches('Retrieved_SD_card'),
aru_status = dplyr::matches('ARU_light'),
date = dplyr::matches('Date'),
time = dplyr::matches('Time'),
aru_photo_url = dplyr::matches('Picture_of_deploy'),
lat = dplyr::matches('lat_'),
long = dplyr::matches('long_'),
comments = dplyr::matches('Comments')
) |>
dplyr::mutate(
mamu_station_id = dplyr::coalesce(uw_mamu_station_id, ncasi_mamu_station_id, cal_fire_mamu_station_id),
date = lubridate::dmy(date),
mamu_station_id = gsub("[- ]", "_", tolower(mamu_station_id))
) |>
glimpse()
load_all()
# load libraries
# library(MAMUbioacoustics)
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "D:" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- 'S1732'
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
deployment_df
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- 'S1732'
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
site
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
cell
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
station
visit <-
deployment_df |>
dplyr::filter(swift_id == swift & visit_id == max(visit_id)) |>
dplyr::pull(visit_id) %>%
str_c('V', .)
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
visit <-
deployment_df |>
dplyr::filter(swift_id == swift & visit_id == max(visit_id)) |>
dplyr::pull(visit_id) %>%
stringr::str_c('V', .)
message(stringr::str_glue('site name = {site}, visit ID = {visit}, cell ID = {cell}, MAMU station ID = {station}'))
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
wav_files |>
purrr::walk(\(x) create_flac_folders(wav_file = x, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
wav_files |>
furrr::future_walk(\(x) convert_to_flac(wav_file = x, input_dir = input_dir, temp_dir = temp_dir, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
convert_to_flac
wav_file <- wav_files[1]
wav_file
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, temp_dir), basename(wav_file))
temp_path
input_dir
temp_dir
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, str_c(temp_dir, '/')), basename(wav_file))
temp_path
wav_file <- wav_files[1]
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, stringr::str_c(temp_dir, '/')), basename(wav_file))
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
file.exists('D:S1732_000/S1732_2023-05-16/S1732_20230516_000000.wav')
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
temp_path <- stringr::str_c(stringr::str_replace(stringr::str_remove(wav_file, basename(wav_file)), input_dir, stringr::str_c(temp_dir, '/')), basename(wav_file))
file.exists('D:S1732_000/S1732_2023-05-16/S1732_20230516_000000.wav')
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
# Define the output flac file path
output_file <- file.path(stringr::str_glue('{output_dir}/{site_name}/{visit_id}/{cell_id}/{station_id}/{swift_id}_{stringr::str_extract(wav_file, "[0-9]{8}")}/{stringr::str_replace(basename(wav_file), ".wav", ".flac")}'))
site_name = site
output_dir
visit_id
visit_id <- visit
cell_id <- cell
station_id = station
swift_id <- swift
# Define the output flac file path
output_file <- file.path(stringr::str_glue('{output_dir}/{site_name}/{visit_id}/{cell_id}/{station_id}/{swift_id}_{stringr::str_extract(wav_file, "[0-9]{8}")}/{stringr::str_replace(basename(wav_file), ".wav", ".flac")}'))
output_file
# Use sox to convert the wav file to flac
# The '-C 8' option sets compression level for FLAC (range 0-8, where 8 is the highest compression)
seewave::sox(
stringr::str_glue('"{temp_path}" "{output_file}"'),
path2exe = "C:/Program Files (x86)/sox-14-4-2"
)
file.exists(output_file)
library(readxl)
df <- read_excel("C:/Users/jmwin/Downloads/0764_OVHD_FY24-INTERNAL.xlsx")
unique(df$PROJECT_PRIMARY_PI_NAME)
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
)
library(tidyverse)
df <- read_excel("C:/Users/jmwin/Downloads/0764_OVHD_FY24-INTERNAL.xlsx")
unique(df$PROJECT_PRIMARY_PI_NAME)
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
)
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
mutate(expense_amount = sum(`Expense Amount`))
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`))
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
as.data.frame()
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
as.data.frame() |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_fund.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
as.data.frame()
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_fund.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_fund.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_faculty.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME, Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_faculty.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME, Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_faculty_and_fund.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_fund.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_faculty.csv")
df |>
mutate(
PROJECT_PRIMARY_PI_NAME = case_when(
PROJECT_PRIMARY_PI_NAME == 'Turner,Wendy C' ~ 'Turner,Wendy',
TRUE ~ PROJECT_PRIMARY_PI_NAME
)
) |>
group_by(PROJECT_PRIMARY_PI_NAME, Fund) |>
summarise(expense_amount = sum(`Expense Amount`)) |>
write_csv("C:/Users/jmwin/OneDrive/Desktop/by_faculty_and_fund.csv")
library(devtools)
load_all()
# load libraries
# library(MAMUbioacoustics)
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "D:" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
convert_to_flac
usethis::use_package("dplyr")
usethis::use_package("purrr")
usethis::use_package("furrr")
usethis::use_package("seewave")
usethis::use_package("stringr")
usethis::use_package("beepr")
usethis::use_package("fs")
usethis::use_package("httr")
usethis::use_package("mapview")
usethis::use_package("sf")
usethis::use_package("readr")
flac_files
flac_files <- 555
message(stringr::str_glue("{length(flac_files)} FLACs compressed!"))
