convert_to_flac <- function(wav_file, input_dir, temp_dir, output_dir, pond_id, visit_id, swift_id) {
temp_path <-
stringr::str_c(stringr::str_replace(stringr::str_remove(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""))), input_dir, temp_dir), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", "")))
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
date <- stringr::str_extract(wav_file, '[0-9]{8}')
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
# Use sox to convert the wav file to flac
# The '-C 8' option sets compression level for FLAC (range 0-8, where 8 is the highest compression)
seewave::sox(
stringr::str_glue('"{temp_path}" "{output_file}"'),
path2exe = "C:/Program Files (x86)/sox-14-4-2"
)
# message('file compressed')
# then clear
fs::file_delete(temp_path)
}
wav_files |>
furrr::future_walk(\(x) convert_to_flac(wav_file = x, input_dir = input_dir, temp_dir = temp_dir, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
# function to handle the file conversion process
convert_to_flac <- function(wav_file, input_dir, temp_dir, output_dir, site_name, visit_id, cell_id, station_id, swift_id) {
temp_path <-
stringr::str_c(stringr::str_replace(stringr::str_remove(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""))), input_dir, temp_dir), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", "")))
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
date <- stringr::str_extract(wav_file, '[0-9]{8}')
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
# Use sox to convert the wav file to flac
# The '-C 8' option sets compression level for FLAC (range 0-8, where 8 is the highest compression)
seewave::sox(
stringr::str_glue('"{temp_path}" "{output_file}"'),
path2exe = "C:/Program Files (x86)/sox-14-4-2"
)
# message('file compressed')
# then clear
fs::file_delete(temp_path)
}
wav_files |>
furrr::future_walk(\(x) convert_to_flac(wav_file = x, input_dir = input_dir, temp_dir = temp_dir, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
library(devtools)
load_all()
# load libraries
# library(MAMUbioacoustics)
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test_SD_card" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
load_all()
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
library(devtools)
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# view data
glimpse(epi_df)
load_all()
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test_SD_card" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
wav_files
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
swift
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
deployment_df <- epi_df
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
site
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
cell
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
station
visit <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::filter(visit_id == max(visit_id)) |>
dplyr::pull(visit_id) %>%
stringr::str_c('V', .)
visit
message(stringr::str_glue('site name = {site}, visit ID = {visit}, cell ID = {cell}, MAMU station ID = {station}'))
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
create_temp_folders
load_all()
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
wav_files |>
purrr::walk(\(x) create_flac_folders(wav_file = x, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
wav_files
wav_files |>
purrr::walk(\(x) create_flac_folders(
wav_file = x,
output_dir = output_dir,
site_name = site,
visit_id = visit,
cell_id = cell,
station_id = station
)
)
wav_files
wav_files
wav_file
wav_files
date <- stringr::str_extract(wav_files, '[0-9]{8}')
date
dates <- unique(stringr::str_extract(wav_files, '[0-9]{8}'))
dates
create_flac_folders <- function(date, output_dir, site_name, visit_id, cell_id, station_id) {
fs::dir_create(
path = stringr::str_glue('{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}')
)
}
load_all()
# load libraries
# library(MAMUbioacoustics)
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test_SD_card" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
tictoc::tic()
copy_compress_flacs(
# deployment info
deployment_df = epi_df,
# SD card location
input_dir = input_dir,
# location to temporarily (and locally) store wavs
temp_dir = temp_dir,
# external hard drive location
output_dir = output_dir
)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
deployment_df <- epi_df
# define the paths for input and output
# these will need to be adjusted for your machine
input_dir <- "C:/Users/jmwin/OneDrive/Desktop/test_SD_card" # SD card directory
temp_dir <- "C:/Users/jmwin/OneDrive/Desktop/temp" # temporary folder, can be anywhere locally
output_dir <- "E:/2025/flacs" # external hard drive
# Set up parallel processing using furrr
plan(multisession, workers = availableCores() - 1)  # Use all but 1 core for processing
# List all .wav files in the input directory
wav_files <- list.files(input_dir, pattern = "\\.wav$", full.names = TRUE, recursive = TRUE)
# create pond/swift/date folders if necessary
# name output files based on wav files
swift <- stringr::str_extract(wav_files[1], 'S[0-9]+')
site <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(site_name) |>
dplyr::pull(site_name)
cell <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(cell_id) |>
dplyr::pull(cell_id)
station <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::distinct(mamu_station_id) |>
dplyr::pull(mamu_station_id)
visit <-
deployment_df |>
dplyr::filter(swift_id == swift) |>
dplyr::filter(visit_id == max(visit_id)) |>
dplyr::pull(visit_id) %>%
stringr::str_c('V', .)
message(stringr::str_glue('site name = {site}, visit ID = {visit}, cell ID = {cell}, MAMU station ID = {station}'))
wav_files |>
purrr::walk(\(x) create_temp_folders(wav_file = x, input_dir = input_dir, temp_dir = temp_dir))
# create flac folders on an external hard drive
create_flac_folders <- function(date, output_dir, site_name, visit_id, cell_id, station_id) {
fs::dir_create(
path = stringr::str_glue('{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}')
)
}
# create flac folders on an external hard drive
create_flac_folders <- function(date, output_dir, site_name, visit_id, cell_id, station_id) {
fs::dir_create(
path = stringr::str_glue('{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}')
)
}
dates <- unique(stringr::str_extract(wav_files, '[0-9]{8}'))
dates
dates <- unique(stringr::str_extract(wav_files, '[0-9]{8}'))
dates |>
purrr::walk(\(x) create_flac_folders(date = x, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station))
dates <- unique(stringr::str_extract(wav_files, '[0-9]{8}'))
output_dir
site
visit
cell
station
dates |>
purrr::walk(\(x) create_flac_folders(date = x, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station))
wav_files |>
furrr::future_walk(\(x) convert_to_flac(wav_file = x, input_dir = input_dir, temp_dir = temp_dir, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
convert_to_flac
wav_files |>
furrr::future_walk(\(x) MAMUbioacoustics:::convert_to_flac(wav_file = x, input_dir = input_dir, temp_dir = temp_dir, output_dir = output_dir, site_name = site, visit_id = visit, cell_id = cell, station_id = station, swift_id = swift))
temp_path <-
stringr::str_c(stringr::str_replace(stringr::str_remove(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""))), input_dir, temp_dir), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", "")))
wav_file <- wav_files[1]
temp_path <-
stringr::str_c(stringr::str_replace(stringr::str_remove(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", ""))), input_dir, temp_dir), basename(stringr::str_replace(wav_file, "\\(-\\d{4}\\)", "")))
temp_path
fs::file_copy(
path = wav_file,
new_path = temp_path,
overwrite = FALSE
)
date <- stringr::str_extract(wav_file, '[0-9]{8}')
date
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
site_name <- site
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
visit_id <- visit
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
cell_id <- cell
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
station_id <- station
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
swift_id <- swift
# Define the output flac file path
output_file <-
file.path(
stringr::str_glue(
'{output_dir}/{site_name}_{visit_id}/{site_name}_{visit_id}_{cell_id}_{station_id}/{site_name}_{visit_id}_{cell_id}_{station_id}_{date}/{site_name}_{visit_id}_{cell_id}_{station_id}{stringr::str_replace(stringr::str_remove(basename(temp_path), swift_id), "wav", "flac")}'
)
)
output_file
# Use sox to convert the wav file to flac
# The '-C 8' option sets compression level for FLAC (range 0-8, where 8 is the highest compression)
seewave::sox(
stringr::str_glue('"{temp_path}" "{output_file}"'),
path2exe = "C:/Program Files (x86)/sox-14-4-2"
)
file.exists(output_file)
flac_files <- list.files(stringr::str_glue('{output_dir}/{site}_{visit}/{site}_{visit}_{cell}_{station}'), pattern = "\\.flac$", full.names = FALSE, recursive = TRUE)
flac_files
print(length(flac_files))
stopifnot('Number of WAV files does not match number of FLAC files compressed' = length(wav_files) == length(flac_files))
wav_files
library(devtools)
load_all()
?map_deployments
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
map_deployments(epi_df)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
map_deployments(epi_df)
map_deployments
load_all()
library(tidyverse)
library(furrr)
# read in deployment data from epicollect ---------------------------------
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
map_deployments(epi_df)
m <- map_deployments(epi_df)
mapview::mapshot(m, url = here::here('mamu_deployment_map.html'))
mapview::mapshot(m, url = here::here('C:/Users/jmwin/OneDrive/Desktop/mamu_deployment_map.html'))
library(devtools)
load_all()
library(tidyverse)
library(furrr)
# get token to access EpiCollect data
token <-
get_access_token(
client_id = '5971',
client_secret = 'ROp47DpAnDaQATMWWYOB26fHyu4xPOmvkfMXWtfF'
)
# read in data from EpiCollect
epi_df <-
read_epicollect(
project_slug = 'mamu-arus',
token = token
)
# view data
glimpse(epi_df)
m <- map_deployments(epi_df)
mapview::mapshot(m, url = here::here('C:/Users/jmwin/OneDrive/Desktop/mamu_deployment_map.html'))
